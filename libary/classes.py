import math
import numpy as np
# from cross_section_libary import library


class Beam:
    def __init__(self):
        self.node_i = None
        self.node_j = None
        self.material = None
        self.cross_section = None
        self.type = ''

    @property
    def length(self):
        x_d = self.node_j.x - self.node_i.x
        y_d = self.node_j.y - self.node_i.y
        return math.sqrt(x_d ** 2 + y_d ** 2)

    @property
    def angle(self):
        x_d = self.node_j.x - self.node_i.x
        y_d = self.node_j.y - self.node_i.y
        if y_d == 0:
            angle = math.pi / 2     # Avoid division with 0. If y_d = 0, then angle = 90 deg.
        elif x_d == 0:
            angle = 0               # Avoid numerical errors. If x_d = 0, then angle = 0 deg.
        else:
            angle = math.atan(x_d / y_d)
        return angle

    @property
    def rotation_matrix(self):
        if self.angle == math.pi / 2:
            c = 0
            s = 1
        elif self.angle == 0:
            c = 1
            s = 0
        else:
            c = math.cos(self.angle)
            s = math.sin(self.angle)
        rotation_matrix = np.array([[c, s, 0, 0, 0, 0],
                                    [-s, c, 0, 0, 0, 0],
                                    [0, 0, 1, 0, 0, 0],
                                    [0, 0, 0, c, s, 0],
                                    [0, 0, 0, -s, c, 0],
                                    [0, 0, 0, 0, 0, 1]])
        return rotation_matrix

class Node:
    def __init__(self, coordinates=None):
        if not isinstance(coordinates, (list, tuple, np.ndarray)):
            raise TypeError('"Coordinates" must be of type list, tuple or numpy array')
        self._coordinates = list(coordinates)
        self.dof = []

    @property
    def coordinates(self):
        return self._coordinates

    @coordinates.setter
    def coordinates(self, value):
        if not isinstance(value, (list, tuple, np.ndarray)):
            raise TypeError('"Coordinates" must be of type list, tuple or numpy array')
        if not len(value) == 2:
            raise ValueError('Provide both x and y coordinate')
        self._coordinates = list(value)

    @property
    def x(self):
        return self._coordinates[0]

    @x.setter
    def x(self, value):
        if not isinstance(value, int, float):
            raise TypeError('"x" must be a float or int object')
        self._coordinates[0] = float(value)

    @property
    def y(self):
        return self._coordinates[1]

    @y.setter
    def y(self, value):
        if not isinstance(value, int, float):
            raise TypeError('"y" must be a float or int object')
        self._coordinates[1] = float(value)


class Material:
    def __init__(self):
        self.mass_density = 0
        self.modulus_of_elasticity = 0
        self.poissons_ratio = 0
        self.shear_modulus = 0
        self.bulk_modulus = 0
        self.ultimate_strength = 0
        self.yield_strength = 0
        # self.steel_type = None


class Steel(Material):
    def __init__(self, steel_type):
        super().__init__()
        self.mass_density = 7850
        self.modulus_of_elasticity = 205e9
        self.poissons_ratio = 0.3
        self.shear_modulus = self.modulus_of_elasticity / (2 * (1 + self.poissons_ratio))
        self.bulk_modulus = self.modulus_of_elasticity / (3 * (1 - 2 * self.poissons_ratio))
        # self._steel_type = steel_type
        # self.steel_type = steel_type

    @property
    def steel_type(self):
        if self._steel_type == 'S235':
            self.yield_strength = 225e6
            self.ultimate_strength = 340e6
        elif self._steel_type == 'S275':
            self.yield_strength = 345e6
            self.ultimate_strength = 470e6
        elif self._steel_type == 'S355':
            self.yield_strength = 345e6
            self.ultimate_strength = 470e6
        elif self._steel_type == 'S450':
            self.yield_strength = 430e6
            self.ultimate_strength = 550e6
        else:
            raise NameError(f'"{self._steel_type}" is not yet implemented. Please chose something else.')

    @steel_type.setter
    def steel_type(self, value):
        if not isinstance(value, str):
            raise TypeError(f'"steel_type" must be a string, but is of type {type(self._steel_type)}.')
        self._steel_type = value


class CrossSection:
    def __init__(self):
        self.name = ''              # Section name
        self.area = 0               # Axial area (cm2)
        self.shear_area_z = 0       # V-shear area (cm2)
        self.shear_area_y = 0       # W-shear area (cm2)
        self.torsion_inertia = 0    # Torsion inertia (cm4)
        self.flex_intertia_z = 0    # Flex. inertia about V-axis (cm4)
        self.flex_intertia_y = 0    # Flex. inertia about W-axis (cm4)
        self.section_modulus_z = 0  # Section modulus about V-axis (cm3)
        self.section_modulus_y = 0  # Section modulus about W-axis (cm3)


class CrossSectionLibrary(CrossSection):
    def __init__(self, cross_section):
        super().__init__()
        if cross_section not in library:
            raise KeyError(
                f'"{cross_section}" is not yet implemented. Please pick a cross-section from: {library.keys()}')
        self.name = cross_section
        self.type = library[cross_section][0]
        self.area = library[cross_section][1] * 100
        self.shear_area_z = library[cross_section][2] * 100
        self.shear_area_y = library[cross_section][3] * 100
        self.torsion_inertia = library[cross_section][4] * 10000
        self.flex_intertia_z = library[cross_section][5] * 10000
        self.flex_intertia_y = library[cross_section][6] * 10000
        self.section_modulus_z = library[cross_section][7] * 1000
        self.section_modulus_y = library[cross_section][8] * 1000


library = {
    'INP100': ['I', 10.6, 3.8, 4.5, 1.6, 12.2, 171.0, 4.9, 34.2],
    'INP120': ['I', 14.2, 5.2, 6.0, 2.7, 21.5, 328.0, 7.4, 54.7],
    'INP140': ['I', 18.2, 6.8, 7.6, 4.3, 35.2, 573.0, 10.7, 81.9],
    'INP160': ['I', 22.8, 8.6, 9.4, 6.6, 54.7, 935.0, 14.8, 117.0],
    'INP180': ['I', 27.9, 10.6, 11.4, 9.6, 81.3, 1450.0, 19.8, 161.0],
    'INP200': ['I', 33.4, 12.8, 13.6, 13.5, 117.0, 2140.0, 26.0, 214.0],
    'INP220': ['I', 39.5, 15.2, 15.9, 18.6, 162.0, 3060.0, 33.1, 278.0],
    'INP240': ['I', 46.1, 17.8, 18.5, 25.0, 221.0, 4250.0, 41.7, 354.0],
    'INP260': ['I', 53.3, 20.8, 21.2, 33.5, 288.0, 5740.0, 51.0, 442.0],
    'INP280': ['I', 61.0, 24.1, 24.1, 44.2, 364.0, 7590.0, 61.2, 542.0],
    'INP300': ['I', 69.0, 27.6, 27.0, 56.8, 451.0, 9800.0, 72.2, 653.0],
    'INP320': ['I', 77.7, 31.3, 30.2, 72.5, 555.0, 12510.0, 84.7, 782.0],
    'INP340': ['I', 86.7, 35.2, 33.4, 90.4, 674.0, 15700.0, 98.4, 923.0],
    'INP360': ['I', 97.0, 39.7, 37.2, 115.0, 818.0, 19610.0, 114.0, 1090.0],
    'INP380': ['I', 107.0, 44.1, 40.7, 141.1, 975.0, 24010.0, 131.0, 1260.0],
    'INP400': ['I', 118.0, 48.8, 44.6, 170.0, 1160.0, 29210.0, 149.0, 1460.0],
    'INP425': ['I', 132.0, 55.0, 50.0, 216.0, 1440.0, 36970.0, 176.0, 1740.0],
    'INP450': ['I', 147.0, 61.6, 55.1, 267.0, 1730.0, 45850.0, 203.0, 2040.0],
    'INP475': ['I', 163.0, 68.6, 60.8, 329.0, 2090.0, 56480.0, 235.0, 2380.0],
    'INP500': ['I', 179.0, 76.0, 66.6, 402.0, 2480.0, 68740.0, 268.0, 2750.0],
    'INP550': ['I', 212.0, 88.5, 80.0, 544.0, 3490.0, 99180.0, 349.0, 3610.0],
    'INP600': ['I', 254.0, 109.2, 92.9, 813.0, 4670.0, 139000.0, 434.0, 4630.0],
    'IPE080': ['I', 7.6, 2.7, 3.2, 0.7, 8.5, 80.1, 3.7, 20.0],
    'IPE100': ['I', 10.3, 3.7, 4.2, 1.2, 15.9, 171.0, 5.8, 34.2],
    'IPE120': ['I', 13.2, 4.8, 5.4, 1.7, 27.7, 318.0, 8.7, 53.0],
    'IPE140': ['I', 16.4, 5.9, 6.7, 2.5, 44.9, 541.0, 12.3, 77.3],
    'IPE160': ['I', 20.1, 7.3, 8.1, 3.6, 68.3, 869.0, 16.7, 109.0],
    'IPE180': ['I', 23.9, 8.7, 9.7, 4.8, 101.0, 1320.0, 22.2, 146.0],
    'IPE200': ['I', 28.5, 10.4, 11.3, 7.0, 142.0, 1940.0, 28.5, 194.0],
    'IPE220': ['I', 33.4, 12.0, 13.5, 9.1, 205.0, 2770.0, 37.3, 252.0],
    'IPE240': ['I', 39.1, 13.9, 15.7, 12.9, 284.0, 3890.0, 47.3, 324.0],
    'IPE270': ['I', 46.0, 16.6, 18.4, 16.0, 420.0, 5790.0, 62.2, 429.0],
    'IPE300': ['I', 53.8, 19.7, 21.4, 20.2, 604.0, 8360.0, 80.5, 557.0],
    'IPE360': ['I', 72.7, 26.7, 28.8, 37.5, 1040.0, 16270.0, 123.0, 904.0],
    'IPE400': ['I', 84.5, 32.1, 32.4, 51.4, 1320.0, 23130.0, 146.0, 1160.0],
    'IPE450': ['I', 98.8, 39.1, 37.0, 67.1, 1680.0, 33740.0, 176.0, 1500.0],
    'IPE500': ['I', 115.5, 46.7, 42.7, 89.7, 2140.0, 48200.0, 214.0, 1930.0],
    'IPE550': ['I', 134.4, 56.0, 48.2, 124.0, 2670.0, 67120.0, 254.0, 2440.0],
    'IPE600': ['I', 156.0, 65.5, 55.7, 166.0, 3390.0, 92080.0, 308.0, 3070.0],
    'HE100A': ['I', 21.2, 4.5, 10.7, 5.3, 134.0, 349.0, 26.8, 72.8],
    'HE120A': ['I', 25.3, 5.3, 12.8, 6.0, 231.0, 606.0, 38.5, 106.0],
    'HE140A': ['I', 31.4, 6.8, 15.9, 8.2, 389.0, 1030.0, 55.6, 155.0],
    'HE160A': ['I', 38.8, 8.6, 19.2, 12.3, 616.0, 1670.0, 76.9, 220.0],
    'HE180A': ['I', 45.3, 9.7, 22.8, 14.9, 925.0, 2510.0, 103.0, 294.0],
    'HE200A': ['I', 53.8, 11.8, 26.7, 21.1, 1340.0, 3690.0, 134.0, 389.0],
    'HE220A': ['I', 64.3, 13.9, 32.3, 28.6, 1950.0, 5410.0, 178.0, 515.0],
    'HE240A': ['I', 76.8, 16.5, 38.4, 41.7, 2770.0, 7760.0, 231.0, 675.0],
    'HE260A': ['I', 86.8, 18.1, 43.3, 52.6, 3670.0, 10450.0, 282.0, 836.0],
    'HE280A': ['I', 97.3, 20.7, 48.5, 62.4, 4760.0, 13670.0, 340.0, 1010.0],
    'HE300A': ['I', 112.5, 23.8, 56.0, 85.6, 6310.0, 18260.0, 421.0, 1260.0],
    'HE320A': ['I', 124.4, 26.7, 62.0, 108.0, 6990.0, 22930.0, 466.0, 1480.0],
    'HE340A': ['I', 133.5, 29.9, 66.0, 128.0, 7440.0, 27690.0, 496.0, 1680.0],
    'HE360A': ['I', 142.8, 33.2, 70.0, 149.0, 7890.0, 33090.0, 526.0, 1890.0],
    'HE400A': ['I', 159.0, 40.4, 76.0, 190.0, 8560.0, 45070.0, 571.0, 2310.0],
    'HE450A': ['I', 178.0, 47.4, 84.0, 245.0, 9470.0, 63720.0, 631.0, 2900.0],
    'HE500A': ['I', 197.5, 54.7, 92.0, 310.0, 10370.0, 86970.0, 691.0, 3550.0],
    'HE550A': ['I', 211.8, 62.6, 96.0, 353.0, 10820.0, 111900.0, 721.0, 4150.0],
    'HE600A': ['I', 226.5, 70.8, 100.0, 399.0, 11270.0, 141200.0, 751.0, 4790.0],
    'HE650A': ['I', 241.6, 79.4, 104.0, 450.0, 11720.0, 175200.0, 782.0, 5470.0],
    'HE700A': ['I', 260.5, 91.3, 108.0, 515.0, 12180.0, 215300.0, 812.0, 6240.0],
    'HE800A': ['I', 285.8, 108.1, 112.0, 599.0, 12640.0, 303400.0, 843.0, 7680.0],
    'H1000A': ['I', 346.8, 146.5, 124.0, 825.0, 14000.0, 553800.0, 934.0, 11190.0],
    'HE100B': ['I', 26.0, 5.4, 13.3, 9.3, 167.0, 450.0, 33.5, 89.9],
    'HE120B': ['I', 34.0, 7.0, 17.6, 13.9, 318.0, 864.0, 52.9, 144.0],
    'HE140B': ['I', 43.0, 8.9, 22.4, 20.1, 550.0, 1510.0, 78.5, 216.0],
    'HE160B': ['I', 54.3, 11.7, 27.7, 31.4, 889.0, 2490.0, 111.0, 311.0],
    'HE180B': ['I', 65.3, 13.9, 33.6, 42.3, 1360.0, 3830.0, 151.0, 426.0],
    'HE200B': ['I', 78.1, 16.5, 40.0, 59.5, 2000.0, 5700.0, 200.0, 570.0],
    'HE220B': ['I', 91.0, 19.2, 46.9, 76.8, 2840.0, 8090.0, 258.0, 736.0],
    'HE240B': ['I', 106.0, 22.2, 54.4, 103.0, 3920.0, 11260.0, 327.0, 938.0],
    'HE260B': ['I', 118.4, 24.3, 60.7, 124.0, 5130.0, 14920.0, 395.0, 1150.0],
    'HE280B': ['I', 131.4, 27.4, 67.2, 144.0, 6590.0, 19270.0, 471.0, 1380.0],
    'HE300B': ['I', 149.1, 30.9, 76.0, 186.0, 8560.0, 25170.0, 571.0, 1680.0],
    'HE320B': ['I', 161.3, 34.3, 82.0, 226.0, 9240.0, 30820.0, 616.0, 1930.0],
    'HE340B': ['I', 170.9, 37.9, 86.0, 258.0, 9690.0, 36660.0, 646.0, 2160.0],
    'HE360B': ['I', 180.6, 41.7, 90.0, 293.0, 10140.0, 43190.0, 676.0, 2400.0],
    'HE400B': ['I', 197.8, 49.8, 96.0, 357.0, 10820.0, 57680.0, 721.0, 2880.0],
    'HE450B': ['I', 218.0, 57.9, 104.0, 442.0, 11720.0, 79890.0, 781.0, 3550.0],
    'HE500B': ['I', 238.6, 66.4, 112.0, 540.0, 12620.0, 107200.0, 842.0, 4290.0],
    'HE550B': ['I', 254.1, 75.4, 116.0, 602.0, 13080.0, 136700.0, 872.0, 4970.0],
    'HE600B': ['I', 270.0, 84.7, 120.0, 669.0, 13530.0, 171000.0, 902.0, 5700.0],
    'HE650B': ['I', 286.3, 94.4, 124.0, 741.0, 13980.0, 210600.0, 932.0, 6480.0],
    'HE700B': ['I', 306.4, 107.4, 128.0, 833.0, 14440.0, 256900.0, 963.0, 7340.0],
    'HE800B': ['I', 334.2, 126.3, 132.0, 949.0, 14900.0, 359100.0, 994.0, 8980.0],
    'H1000B': ['I', 400.0, 168.9, 144.0, 1260.0, 16280.0, 644700.0, 1090.0, 12890.0],
    'HE100M': ['I', 53.2, 11.8, 28.3, 68.5, 399.0, 1140.0, 75.3, 190.0],
    'HE120M': ['I', 66.4, 14.6, 35.3, 92.0, 703.0, 2020.0, 112.0, 288.0],
    'HE140M': ['I', 80.6, 17.6, 42.8, 120.0, 1140.0, 3290.0, 157.0, 411.0],
    'HE160M': ['I', 97.1, 21.6, 50.9, 163.0, 1760.0, 5100.0, 212.0, 566.0],
    'HE180M': ['I', 113.3, 25.0, 59.5, 204.0, 2580.0, 7480.0, 277.0, 748.0],
    'HE200M': ['I', 131.3, 28.7, 68.7, 260.0, 3650.0, 10640.0, 354.0, 967.0],
    'HE220M': ['I', 149.4, 32.5, 78.3, 316.0, 5010.0, 14600.0, 444.0, 1220.0],
    'HE240M': ['I', 199.6, 42.0, 105.8, 630.0, 8150.0, 24290.0, 657.0, 1800.0],
    'HE260M': ['I', 219.6, 45.6, 116.1, 722.0, 10450.0, 31310.0, 780.0, 2160.0],
    'HE280M': ['I', 240.2, 50.3, 126.7, 810.0, 13160.0, 39550.0, 914.0, 2550.0],
    'HE300M': ['I', 303.1, 62.2, 161.2, 1410.0, 19400.0, 59200.0, 1250.0, 3480.0],
    'HE320M': ['I', 312.0, 65.8, 164.8, 1510.0, 19710.0, 68130.0, 1280.0, 3800.0],
    'HE340M': ['I', 315.8, 69.3, 164.8, 1510.0, 19710.0, 76370.0, 1280.0, 4050.0],
    'HE360M': ['I', 318.8, 72.8, 164.3, 1510.0, 19520.0, 84870.0, 1270.0, 4300.0],
    'HE400M': ['I', 325.8, 80.0, 163.7, 1520.0, 19330.0, 104100.0, 1260.0, 4820.0],
    'HE450M': ['I', 335.4, 88.9, 163.7, 1530.0, 19340.0, 131500.0, 1260.0, 5500.0],
    'HE500M': ['I', 344.3, 97.7, 163.2, 1540.0, 19150.0, 161900.0, 1250.0, 6180.0],
    'HE550M': ['I', 354.4, 106.9, 163.2, 1560.0, 19160.0, 198000.0, 1250.0, 6920.0],
    'HE600M': ['I', 363.7, 115.8, 162.7, 1570.0, 18970.0, 237400.0, 1240.0, 7660.0],
    'HE650M': ['I', 373.7, 124.8, 162.7, 1580.0, 18980.0, 281700.0, 1240.0, 8430.0],
    'HE700M': ['I', 383.0, 133.7, 162.1, 1590.0, 18800.0, 329300.0, 1240.0, 9200.0],
    'HE800M': ['I', 404.3, 152.3, 161.6, 1650.0, 18630.0, 442600.0, 1230.0, 10870.0],
    'H1000M': ['I', 444.2, 187.1, 161.1, 1710.0, 18460.0, 722300.0, 1220.0, 14330.0],
    'H1000X': ['I', 304.9, 126.9, 112.0, 535.0, 12624.0, 498568.0, 841.6, 9971.4],
    'PG500': ['I', 312.0, 127.6, 120.0, 936.0, 13599.0, 120836.0, 906.6, 4833.4],
    'PG600': ['I', 342.0, 152.3, 120.0, 1026.0, 13621.5, 185706.0, 908.1, 6190.2],
    'PG700': ['I', 336.0, 122.3, 140.0, 1025.5, 15792.0, 274057.0, 1052.8, 7830.2],
    'PG1000': ['I', 398.0, 173.3, 140.0, 880.7, 21500.2, 632560.7, 1228.6, 12651.2],
    'PG1001': ['I', 477.5, 214.3, 163.3, 1484.8, 25131.5, 738199.8, 1436.1, 14764.0],
    'PG1200': ['I', 464.0, 206.4, 160.0, 1578.7, 18074.7, 1041834.7, 1205.0, 17363.9],
    'PG1201': ['I', 630.0, 302.1, 200.0, 3490.0, 22747.5, 1325250.0, 1516.5, 22087.5],
    'PG1400': ['I', 790.0, 358.8, 266.7, 4503.3, 53625.8, 2372583.3, 2681.3, 33894.0],
    'PG1401': ['I', 992.0, 470.5, 320.0, 8490.7, 64682.7, 2855210.7, 3234.1, 40788.7],
    'PG1600': ['I', 1312.0, 553.5, 480.0, 11797.3, 216789.3, 5351637.3, 7226.3, 66895.5],
    'PG1601': ['I', 1570.0, 683.8, 560.0, 19803.3, 253520.8, 6216043.3, 8450.7, 77700.5],
    'P30015': ['I', 90.0, 60.0, 12.0, 270.0, 67.5, 6750.0, 45.0, 450.0],
    'PL1005': ['I', 5.0, 3.3, 0.3, 0.4, 0.1, 41.7, 0.4, 8.3],
    'P17740': ['P', 2174.0, 1087.0, 1087.0, 16274973.6, 8137486.8, 8137486.8, 91949.0, 91949.0],
    'P14060': ['P', 2525.8, 1262.9, 1262.9, 11361230.5, 5680615.3, 5680615.3, 81151.6, 81151.6],
    'P12040': ['P', 1457.7, 728.8, 728.8, 4909530.2, 2454765.1, 2454765.1, 40912.8, 40912.8],
    'P12060': ['P', 2148.8, 1074.4, 1074.4, 7000951.3, 3500475.6, 3500475.6, 58341.3, 58341.3],
    'P10025': ['P', 790.5, 395.2, 395.2, 1940456.9, 970228.5, 970228.5, 19099.0, 19099.0],
    'P10060': ['P', 1771.9, 885.9, 885.9, 3929981.6, 1964990.8, 1964990.8, 39299.8, 39299.8],
    'P10045': ['P', 1350.1, 675.0, 675.0, 3085146.0, 1542573.0, 1542573.0, 30851.5, 30851.5],
    'P81332': ['P', 780.4, 390.2, 390.2, 1192676.7, 596338.4, 596338.4, 14670.1, 14670.1],
    'P81325': ['P', 628.5, 314.2, 314.2, 975645.8, 487822.9, 487822.9, 12000.6, 12000.6],
    'P76232': ['P', 729.5, 364.7, 364.7, 974238.7, 487119.4, 487119.4, 12785.3, 12785.3],
    'P76225': ['P', 587.8, 293.9, 293.9, 798242.5, 399121.2, 399121.2, 10475.6, 10475.6],
    'P71125': ['P', 547.1, 273.5, 273.5, 643771.4, 321885.7, 321885.7, 9054.5, 9054.5],
    'P71116': ['P', 347.2, 173.6, 173.6, 419619.9, 209809.9, 209809.9, 5901.8, 5901.8],
    'P55930': ['P', 501.7, 250.9, 250.9, 351872.5, 175936.3, 175936.3, 6294.7, 6294.7],
    'P45732': ['P', 424.8, 212.4, 212.4, 193071.9, 96536.0, 96536.0, 4224.8, 4224.8],
    'P45725': ['P', 344.4, 172.2, 172.2, 160942.0, 80471.0, 80471.0, 3521.7, 3521.7],
    'P35532': ['P', 323.5, 161.7, 161.7, 85608.4, 42804.2, 42804.2, 2407.4, 2407.4],
    'P35525': ['P', 263.5, 131.7, 131.7, 72246.5, 36123.3, 36123.3, 2031.7, 2031.7],
    'P35516': ['P', 169.7, 84.8, 84.8, 49059.6, 24529.8, 24529.8, 1379.6, 1379.6],
    'P35513': ['P', 136.8, 68.4, 68.4, 40270.9, 20135.5, 20135.5, 1132.5, 1132.5],
    'P27316': ['P', 128.5, 64.2, 64.2, 21328.3, 10664.2, 10664.2, 781.0, 781.0],
    'P27313': ['P', 103.9, 51.9, 51.9, 17654.2, 8827.1, 8827.1, 646.4, 646.4],
    'P21913': ['P', 82.3, 41.2, 41.2, 8803.7, 4401.8, 4401.8, 401.8, 401.8],
    'P21916': ['P', 101.5, 50.8, 50.8, 10541.7, 5270.8, 5270.8, 481.1, 481.1],
    'P21925': ['P', 154.6, 77.3, 77.3, 14747.4, 7373.7, 7373.7, 673.1, 673.1],
    'P16813': ['P', 62.1, 31.0, 31.0, 3782.7, 1891.4, 1891.4, 224.8, 224.8],
    'P45719': ['P', 262.1, 131.1, 131.1, 125915.6, 62957.8, 62957.8, 2755.3, 2755.3],
    '151040': ['C', 1520.5, 760.3, 760.3, 5571605.1, 2785802.6, 2785802.6, 44572.8, 44572.8],
    '158140': ['C', 1403.0, 701.5, 701.5, 4378074.3, 2189037.1, 2189037.1, 37856.2, 37856.2],
    '157640': ['C', 1371.0, 685.5, 685.5, 4085145.4, 2042572.7, 2042572.7, 36119.8, 36119.8],
    '157140': ['C', 1338.9, 669.5, 669.5, 3805588.9, 1902794.4, 1902794.4, 34424.1, 34424.1],
    '877135': ['C', 830.7, 415.4, 415.4, 1187934.3, 593967.1, 593967.1, 15027.6, 15027.6],
    '121740': ['C', 1815.8, 907.9, 907.9, 9486064.5, 4743032.3, 4743032.3, 63879.2, 63879.2],
    '101760': ['C', 2497.6, 1248.8, 1248.8, 10984452.1, 5492226.0, 5492226.0, 79310.1, 79310.1],
    '811040': ['C', 1088.9, 544.4, 544.4, 2048236.4, 1024118.2, 1024118.2, 22595.0, 22595.0],
    '761240': ['C', 1182.5, 591.2, 591.2, 2622423.2, 1311211.6, 1311211.6, 26732.1, 26732.1],
    '761040': ['C', 1056.8, 528.4, 528.4, 1872919.9, 936460.0, 936460.0, 21259.0, 21259.0],
    '711040': ['C', 1024.8, 512.4, 512.4, 1707911.5, 853955.8, 853955.8, 19963.9, 19963.9],
    'B20010': ['B', 76.0, 33.8, 33.8, 6859.0, 4585.3, 4585.3, 458.5, 458.5],
    'B40020': ['B', 304.0, 135.4, 135.4, 109744.0, 73365.3, 73365.3, 3668.3, 3668.3],
    'B30010': ['B', 116.0, 51.6, 51.6, 24389.0, 16278.7, 16278.7, 1085.2, 1085.2],
    'B30100': ['B', 800.0, 410.3, 410.3, 80000.0, 66666.7, 66666.7, 4444.4, 4444.4],
    'B30012': ['B', 143.8, 64.0, 64.0, 29704.6, 19840.5, 19840.5, 1322.7, 1322.7],
    'B10003': ['B', 804.0, 472.4, 210.8, 576757.7, 225452.0, 980012.0, 11272.6, 19600.2],
    'B10004': ['B', 1056.0, 622.8, 274.4, 723874.9, 282112.0, 1256832.0, 14105.6, 25136.6],
    'B80030': ['B', 684.0, 384.0, 208.4, 427200.1, 184292.0, 558532.0, 9214.6, 13963.3],
    'B14003': ['B', 1044.0, 644.5, 213.8, 886026.2, 307772.0, 2329372.0, 15388.6, 33276.7],
    'B90060': ['B', 1416.0, 826.4, 390.9, 829498.6, 337312.0, 1322712.0, 16865.6, 29393.6],
    'UNP200': ['G', 32.2, 9.2, 15.3, 11.9, 148.0, 1910.0, 26.9, 191.0],
    'UNP120': ['G', 17.0, 3.9, 8.6, 4.2, 43.2, 364.0, 11.1, 60.7],
    'HP140700': ['ANG', 12.4, 7.0, 2.8, 4.5, 4.7, 239.7, 2.8, 42.1],
    'HP160700': ['ANG', 14.6, 8.0, 3.4, 6.4, 7.2, 371.9, 3.8, 58.6],
    'HP180100': ['ANG', 22.5, 12.8, 5.0, 14.6, 15.7, 716.7, 6.9, 96.8],
    'HP200120': ['ANG', 29.5, 17.0, 6.5, 24.8, 25.4, 1152.7, 10.0, 138.0],
    'HP240120': ['ANG', 37.3, 20.4, 8.9, 45.2, 45.9, 2119.9, 15.5, 220.9],
    'HP260120': ['ANG', 41.3, 22.1, 10.2, 59.1, 58.9, 2762.8, 18.6, 270.8]
}
